
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Waste classification AI agent.
 *
 * - classifyWaste - A function that handles the waste classification process.
 * - ClassifyWasteInput - The input type for the classifyWaste function.
 * - ClassifyWasteOutput - The return type for the classifyWaste function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ClassifyWasteInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      "A photo of waste, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type ClassifyWasteInput = z.infer<typeof ClassifyWasteInputSchema>;

const AIWasteCategorySchema = z.enum(["recyclable", "compostable", "non-recyclable"]);
export type AIWasteCategory = z.infer<typeof AIWasteCategorySchema>;

const ClassifyWasteOutputSchema = z.object({
  category: AIWasteCategorySchema
    .describe('The predicted category of the waste: recyclable, compostable, or non-recyclable.'),
  confidence: z.number().min(0).max(1).describe('The confidence level of the prediction (0-1).'),
});
export type ClassifyWasteOutput = z.infer<typeof ClassifyWasteOutputSchema>;

export async function classifyWaste(input: ClassifyWasteInput): Promise<ClassifyWasteOutput> {
  return classifyWasteFlow(input);
}

const classifyWastePrompt = ai.definePrompt({
  name: 'classifyWastePrompt',
  input: {schema: ClassifyWasteInputSchema},
  output: {schema: ClassifyWasteOutputSchema},
  prompt: `You are an expert in waste management and sustainable practices.

You will classify the waste item in the provided photo into one of the following categories:

1.  ♻️ Recyclable – Items that can be processed and materials recovered for reuse. Common examples include clean paper, cardboard, specific types of plastic containers (like PETE #1, HDPE #2 bottles and jugs if clean), glass bottles and jars, and metal cans (aluminum, steel, tin). The item must be relatively clean and dry to be considered recyclable.
2.  🌱 Compostable – Organic matter that can naturally decompose into nutrient-rich compost. This primarily includes food scraps (fruit and vegetable peels, coffee grounds, eggshells, plate scrapings - excluding large amounts of meat, dairy, or oily foods for home composting), and garden waste (leaves, grass clippings, small twigs). Some certified compostable packaging might also fit here if specified by local programs.
3.  🚫 Non-Recyclable – Items that currently cannot be recycled or composted through standard municipal programs and are typically sent to landfill. This includes items like Styrofoam, most flexible plastic packaging (chip bags, candy wrappers), mixed-material items that are hard to separate, heavily soiled or greasy paper/cardboard, broken ceramics or glass (that isn't bottle/jar glass), and general trash.

Analyze the following image and determine the most appropriate category based on its primary material and common disposal method. Provide the predicted waste category and your confidence level (0-1).

Photo: {{media url=photoDataUri}}

Ensure the 'category' field ONLY contains one of "recyclable", "compostable", or "non-recyclable".
The 'confidence' field should be a number between 0 and 1.`,
});

const classifyWasteFlow = ai.defineFlow(
  {
    name: 'classifyWasteFlow',
    inputSchema: ClassifyWasteInputSchema,
    outputSchema: ClassifyWasteOutputSchema,
  },
  async input => {
    const {output} = await classifyWastePrompt(input);
    // Ensure output conforms to the schema, especially the enum for category.
    if (output && output.category) {
        const lowerCaseCategory = output.category.toLowerCase();
        if (AIWasteCategorySchema.safeParse(lowerCaseCategory).success) {
            output.category = lowerCaseCategory as AIWasteCategory;
        } else {
            // If LLM returns an invalid category, default to 'non-recyclable' or handle as an error.
            // For now, we let Zod validation catch this if it's truly out of enum and this provides a fallback.
            console.warn(`AI returned an invalid category: '${output.category}'. Defaulting to 'non-recyclable'.`);
            output.category = "non-recyclable";
        }
    } else if (output) {
        // If output exists but category is missing, default it
        console.warn(`AI output missing category. Defaulting to 'non-recyclable'.`);
        output.category = "non-recyclable";
    } else {
        // If output itself is null/undefined
        console.warn(`AI returned no output. Defaulting classification.`);
        return { category: "non-recyclable", confidence: 0.1 };
    }
    return output!;
  }
);

