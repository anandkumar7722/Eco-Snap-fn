
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Waste classification AI agent.
 *
 * - classifyWaste - A function that handles the waste classification process.
 * - ClassifyWasteInput - The input type for the classifyWaste function.
 * - ClassifyWasteOutput - The return type for the classifyWaste function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ClassifyWasteInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      "A photo of waste, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type ClassifyWasteInput = z.infer<typeof ClassifyWasteInputSchema>;

// Define the specific waste categories the AI should output
const AIWasteCategorySchema = z.enum([
    "cardboard", 
    "paper", 
    "glass", 
    "plasticPete", 
    "plasticHdpe", 
    "plasticPp", 
    "plasticPs", 
    "plasticOther", 
    "ewaste", 
    "biowaste", 
    "metal", 
    "other" // For general trash
]);
export type AIWasteCategory = z.infer<typeof AIWasteCategorySchema>;

const ClassifyWasteOutputSchema = z.object({
  category: AIWasteCategorySchema
    .describe('The predicted specific category of the waste.'),
  confidence: z.number().min(0).max(1).describe('The confidence level of the prediction (0-1).'),
});
export type ClassifyWasteOutput = z.infer<typeof ClassifyWasteOutputSchema>;

export async function classifyWaste(input: ClassifyWasteInput): Promise<ClassifyWasteOutput> {
  return classifyWasteFlow(input);
}

const classifyWastePrompt = ai.definePrompt({
  name: 'classifyWastePrompt',
  input: {schema: ClassifyWasteInputSchema},
  output: {schema: ClassifyWasteOutputSchema},
  prompt: `You are an expert in waste management and material identification.
Analyze the provided photo of a waste item and classify it into ONE of the following specific categories:

- "cardboard": Corrugated cardboard (like shipping boxes) or flat cardboard (like cereal boxes). Must be clean and dry.
- "paper": Newspapers, magazines, office paper, junk mail. Must be clean and dry. Not waxy or heavily soiled.
- "glass": Glass bottles and jars (clear, brown, green). Should be empty and rinsed. Do not classify broken window glass or ceramics here.
- "plasticPete": Plastic items marked with resin code #1 (PET or PETE). Typically clear beverage bottles, food containers.
- "plasticHdpe": Plastic items marked with resin code #2 (HDPE). Typically milk jugs, detergent bottles, some plastic bags.
- "plasticPp": Plastic items marked with resin code #5 (PP). Typically yogurt containers, bottle caps, some food tubs.
- "plasticPs": Plastic items marked with resin code #6 (PS). Typically disposable foam cups/plates, some food containers, packing peanuts. Often not recyclable.
- "plasticOther": Any other plastic items, including those marked with resin codes #3 (V/PVC), #4 (LDPE), #7 (OTHER), or plastics with no visible resin code. This also includes items you identify as plastic but cannot determine the specific type.
- "ewaste": Electronic waste. Includes old phones, computers, cables, batteries, TVs, and other electronic devices.
- "biowaste": Organic matter. Includes food scraps (fruit/vegetable peels, coffee grounds, eggshells), yard trimmings (leaves, grass clippings).
- "metal": Metal items. Includes aluminum cans, steel/tin cans, clean foil.
- "other": General trash. Items that do not fit into any of the above categories, are heavily contaminated, or are mixed-material items that cannot be easily separated. This is for items typically sent to landfill.

Photo: {{media url=photoDataUri}}

Based on the image, determine the most appropriate specific category.
Ensure the 'category' field in your output strictly matches one of the allowed enum values provided in the schema.
The 'confidence' field should be a number between 0 and 1.`,
});

const classifyWasteFlow = ai.defineFlow(
  {
    name: 'classifyWasteFlow',
    inputSchema: ClassifyWasteInputSchema,
    outputSchema: ClassifyWasteOutputSchema,
  },
  async input => {
    const {output} = await classifyWastePrompt(input);
    
    if (!output || !output.category) {
      console.warn(`AI returned no output or category. Defaulting classification to 'other'. Input:`, input);
      return { category: "other" as AIWasteCategory, confidence: 0.1 };
    }
    
    // Ensure the returned category is valid against the schema
    // Zod validation on the prompt output should handle this, but an extra check is good.
    const parseResult = AIWasteCategorySchema.safeParse(output.category);
    if (!parseResult.success) {
        console.warn(`AI returned an invalid category: '${output.category}'. Defaulting to 'other'. Errors:`, parseResult.error);
        output.category = "other" as AIWasteCategory;
        output.confidence = Math.min(output.confidence, 0.5); // Lower confidence if category was invalid
    }

    return output;
  }
);
