
import type { z } from 'zod';

export type WasteCategory =
  'ewaste' |
  'plastic' |
  'biowaste' |
  'cardboard' |
  'paper' |
  'glass' |
  'metal' |
  'organic' |
  'other' |
  'plasticOther' |
  'plasticPete' |
  'plasticHdpe' |
  'plasticPp' |
  'plasticPs';

export interface ClassificationRecord {
  id: string;
  imageDataUri: string;
  category: WasteCategory;
  confidence: number;
  timestamp: number;
  points?: number;
}

// Firestore Data Structures
export interface WasteEntry {
  id?: string; // Auto-generated by Firestore
  userId: string;
  timestamp: number; // Store as Unix timestamp (number) for easier querying
  type: WasteCategory;
  quantity: number;
  unit: 'items' | 'kg' | 'g' | 'count'; // Added count for generic items
  imageUrl?: string;
  notes?: string;
  location?: { // Optional for location-based filtering
    latitude: number;
    longitude: number;
  };
}

export interface UserProfile {
  id: string; // Corresponds to Firebase Auth UID
  displayName: string;
  email?: string;
  avatar?: string; // data URI or link to an image
  score: number; // Total points
  co2Managed: number; // CO2 managed in Kg
  targetScore?: number; // Score needed for next level - Now optional as levels are defined
  
  // Detailed waste counts
  totalEwaste: number;
  totalPlastic: number;
  totalBiowaste: number;
  totalCardboard: number;
  totalPaper: number;
  totalGlass: number;
  totalMetal: number;
  totalOrganic: number; // Could be combined with biowaste depending on definition
  totalOther: number;
  totalPlasticOther: number;
  totalPlasticPete: number;
  totalPlasticHdpe: number;
  totalPlasticPp: number;
  totalPlasticPs: number;
  
  itemsClassified: number; // Overall count of all items
  challengesCompleted: number;
  badges?: string[]; // Array of badge IDs or names based on completed challenges or levels
  scheduleNotificationLocation?: string; // e.g., Zip code or address
  scheduleNotificationsEnabled?: boolean;
}

// For Gamified Reduction Challenges
export interface Challenge {
  id: string; // Firestore document ID
  title: string;
  description: string;
  points: number;
  badgeIcon?: string; // Lucide icon name or path to SVG
  badgeName?: string; // Name of the badge awarded
  type: 'reduce_category_by_percentage' | 'log_specific_item_count' | 'daily_login' | 'overall_reduction';
  categoryGoal?: WasteCategory; // For category-specific challenges
  targetValue: number; // e.g., 20 for 20%, 5 for 5 items
  unit?: '%' | 'items' | 'days';
  durationDays?: number; // For time-bound challenges
  isActive: boolean;
  createdAt: number; // Timestamp
}

export interface UserChallengeProgress {
  challengeId: string;
  userId: string;
  currentProgress: number;
  targetValue: number; // Copied from Challenge for easy reference
  completed: boolean;
  completedAt?: number; // Timestamp
  startedAt: number; // Timestamp
  lastUpdatedAt: number; // Timestamp
}


// For Community Reuse Marketplace
export interface MarketplaceItem {
  id: string;
  userId: string; // Firebase Auth UID of the poster
  title: string;
  description: string;
  itemCategory: WasteCategory | 'furniture' | 'clothing' | 'books' | 'food' | 'other_reuse';
  imageDataUri?: string;
  postedAt: number;
  postedByDisplayName: string; // To display without fetching user profile separately
  status: 'available' | 'reserved' | 'taken';
  location?: string; // General location
  contactInfo?: string;
}


// Data structure for storing user game/app data (consolidated)
// This might be largely represented by the UserProfile and UserChallengeProgress collections
// UserEcoData might not be a single document but a concept of related documents.

// For the "Let's recycle" quick log section
export interface QuickLogItem {
  id: WasteCategory;
  name: string;
  imageUrl?: string;
  icon?: React.ElementType;
  points: number;
  dataAiHint: string;
  placeholderText?: string;
}

// Form input types
const loginSchema = z.object({
  email: z.string().email(),
  password: z.string().min(6),
});
export type LoginFormInputs = z.infer<typeof loginSchema>;

const signupSchema = z.object({
  name: z.string().min(2),
  email: z.string().email(),
  password: z.string().min(6),
  confirmPassword: z.string().min(6),
}).refine((data) => data.password === data.confirmPassword, {
  message: "Passwords don't match.",
  path: ['confirmPassword'],
});
export type SignupFormInputs = z.infer<typeof signupSchema>;

// For IoT Smart Bin Integration
export interface BinLocation {
  latitude: number;
  longitude: number;
}

export interface BinData {
  id: string;
  location: BinLocation;
  fill_level: number; // 0-100
  lastEmptied: number; // timestamp
  notify: boolean;
}

// For Recycling Schedules
export interface RecyclingScheduleItem {
  id: string;
  date: string; // e.g., "2024-08-15"
  wasteType: 'recycling' | 'compost' | 'trash' | 'yard_waste' | string; // Allow custom types
  notes?: string;
}

export interface UserScheduleSettings {
  locationQuery: string; // e.g., zip code or address
  notificationsEnabled: boolean;
  lastFetched?: number; // timestamp
  schedules?: RecyclingScheduleItem[];
}
